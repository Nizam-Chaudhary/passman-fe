/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Passman API's
 * Passman Backend API's
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

/**
 * Sign up user
 * @summary Sign up user
 */
export const postApiV1AuthSignUpBodyUserNameMin = 2;

export const postApiV1AuthSignUpBodyUserNameMax = 255;
export const postApiV1AuthSignUpBodyEmailMax = 255;
export const postApiV1AuthSignUpBodyPasswordMin = 8;

export const postApiV1AuthSignUpBody = zod.object({
  userName: zod
    .string()
    .min(postApiV1AuthSignUpBodyUserNameMin)
    .max(postApiV1AuthSignUpBodyUserNameMax),
  email: zod.string().email().max(postApiV1AuthSignUpBodyEmailMax),
  password: zod.string().min(postApiV1AuthSignUpBodyPasswordMin),
});

export const postApiV1AuthSignUpResponseDataIdMin = -2147483648;

export const postApiV1AuthSignUpResponseDataIdMax = 2147483647;
export const postApiV1AuthSignUpResponseDataUserNameMax = 255;
export const postApiV1AuthSignUpResponseDataEmailMax = 255;

export const postApiV1AuthSignUpResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(postApiV1AuthSignUpResponseDataIdMin)
          .max(postApiV1AuthSignUpResponseDataIdMax),
        userName: zod.string().max(postApiV1AuthSignUpResponseDataUserNameMax),
        email: zod.string().max(postApiV1AuthSignUpResponseDataEmailMax),
        masterKey: zod
          .object({
            iv: zod.string().min(1),
            encrypted: zod.string().min(1),
            salt: zod.string().min(1),
          })
          .nullable(),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * Sign in user
 * @summary Sign in user
 */
export const postApiV1AuthSignInBodyEmailMax = 255;
export const postApiV1AuthSignInBodyPasswordMin = 8;

export const postApiV1AuthSignInBody = zod.object({
  email: zod.string().email().max(postApiV1AuthSignInBodyEmailMax),
  password: zod.string().min(postApiV1AuthSignInBodyPasswordMin),
});

export const postApiV1AuthSignInResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        token: zod.string().min(1),
        refreshToken: zod.string().min(1),
        id: zod.number().min(1),
        email: zod.string().email(),
        userName: zod.string().min(1),
        masterKey: zod
          .object({
            iv: zod.string().min(1),
            encrypted: zod.string().min(1),
            salt: zod.string().min(1),
          })
          .nullable(),
        isVerified: zod.boolean(),
      }),
    })
  );

/**
 * Refresh access token
 * @summary Refresh access token
 */
export const postApiV1AuthRefreshTokenBody = zod.object({
  refreshToken: zod.string(),
});

export const postApiV1AuthRefreshTokenResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        token: zod.string().min(1),
        refreshToken: zod.string().min(1),
      }),
    })
  );

/**
 * Verify user email
 * @summary Verify user email
 */
export const patchApiV1AuthVerifyBodyOtpMin = 6;

export const patchApiV1AuthVerifyBodyOtpMax = 6;

export const patchApiV1AuthVerifyBody = zod.object({
  email: zod.string().email().min(1),
  otp: zod
    .string()
    .min(patchApiV1AuthVerifyBodyOtpMin)
    .max(patchApiV1AuthVerifyBodyOtpMax),
});

export const patchApiV1AuthVerifyResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * creates master key for user
 * @summary Create master key for user
 */
export const patchApiV1AuthCreateMasterKeyBodyMasterPasswordMin = 10;

export const patchApiV1AuthCreateMasterKeyBody = zod.object({
  masterPassword: zod
    .string()
    .min(patchApiV1AuthCreateMasterKeyBodyMasterPasswordMin),
  masterKey: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
    salt: zod.string().min(1),
  }),
  recoveryKey: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
    salt: zod.string().min(1),
  }),
});

export const patchApiV1AuthCreateMasterKeyResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * Verify master password for user
 * @summary Verify Master password for user
 */
export const postApiV1AuthVerifyMasterPasswordBody = zod.object({
  masterPassword: zod.string().min(1),
});

export const postApiV1AuthVerifyMasterPasswordResponse = zod.object({
  status: zod.enum(["success"]),
  data: zod.object({
    masterKey: zod.object({
      iv: zod.string().min(1),
      encrypted: zod.string().min(1),
      salt: zod.string().min(1),
    }),
  }),
});

/**
 * Resend otp to user's email
 * @summary Resend otp to user's email
 */
export const postApiV1AuthResendOtpBody = zod.object({
  email: zod.string().email(),
});

export const postApiV1AuthResendOtpResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * send reset password email
 * @summary send reset password email
 */
export const postApiV1AuthResetPasswordMailBody = zod.object({
  email: zod.string().email(),
});

export const postApiV1AuthResetPasswordMailResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * reset login password
 * @summary reset login password
 */
export const patchApiV1AuthResetPasswordBodyTokenRegExp =
  /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
export const patchApiV1AuthResetPasswordBodyPasswordMin = 8;

export const patchApiV1AuthResetPasswordBody = zod.object({
  token: zod.string().regex(patchApiV1AuthResetPasswordBodyTokenRegExp),
  password: zod.string().min(patchApiV1AuthResetPasswordBodyPasswordMin),
});

export const patchApiV1AuthResetPasswordResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * Update master password
 * @summary Update master password
 */
export const patchApiV1AuthMasterPasswordBodyMasterPasswordMin = 10;

export const patchApiV1AuthMasterPasswordBody = zod.object({
  masterPassword: zod
    .string()
    .min(patchApiV1AuthMasterPasswordBodyMasterPasswordMin),
  masterKey: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
    salt: zod.string().min(1),
  }),
  recoveryKey: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
    salt: zod.string().min(1),
  }),
});

export const patchApiV1AuthMasterPasswordResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  message: zod.string(),
});

/**
 * Upload file
 * @summary Upload file
 */
export const postApiV1FilesUploadResponseDataIdMin = -2147483648;

export const postApiV1FilesUploadResponseDataIdMax = 2147483647;
export const postApiV1FilesUploadResponseDataUrlMax = 512;
export const postApiV1FilesUploadResponseDataFileKeyMax = 256;

export const postApiV1FilesUploadResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(postApiV1FilesUploadResponseDataIdMin)
          .max(postApiV1FilesUploadResponseDataIdMax),
        url: zod.string().max(postApiV1FilesUploadResponseDataUrlMax),
        fileKey: zod.string().max(postApiV1FilesUploadResponseDataFileKeyMax),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * Check Server health
 * @summary Check server health
 */
export const getHealthResponse = zod.object({
  status: zod.enum(["Hello, World!"]),
});

/**
 * add password
 * @summary Add a new password
 */
export const postApiV1PasswordsBodyVaultIdMin = 0;

export const postApiV1PasswordsBodyVaultIdMax = 2147483647;
export const postApiV1PasswordsBodyUsernameMax = 255;
export const postApiV1PasswordsBodySiteMax = 255;
export const postApiV1PasswordsBodyFaviconUrlMax = 255;
export const postApiV1PasswordsBodyNoteMax = 500;

export const postApiV1PasswordsBody = zod.object({
  vaultId: zod
    .number()
    .min(postApiV1PasswordsBodyVaultIdMin)
    .max(postApiV1PasswordsBodyVaultIdMax),
  username: zod.string().min(1).max(postApiV1PasswordsBodyUsernameMax),
  password: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
  }),
  site: zod.string().min(1).max(postApiV1PasswordsBodySiteMax),
  faviconUrl: zod
    .string()
    .url()
    .max(postApiV1PasswordsBodyFaviconUrlMax)
    .nullish(),
  note: zod.string().max(postApiV1PasswordsBodyNoteMax).nullish(),
});

export const postApiV1PasswordsResponseDataIdMin = -2147483648;

export const postApiV1PasswordsResponseDataIdMax = 2147483647;
export const postApiV1PasswordsResponseDataUserIdMin = -2147483648;

export const postApiV1PasswordsResponseDataUserIdMax = 2147483647;
export const postApiV1PasswordsResponseDataVaultIdMin = -2147483648;

export const postApiV1PasswordsResponseDataVaultIdMax = 2147483647;
export const postApiV1PasswordsResponseDataSiteMax = 255;
export const postApiV1PasswordsResponseDataUsernameMax = 255;
export const postApiV1PasswordsResponseDataFaviconUrlMax = 255;
export const postApiV1PasswordsResponseDataNoteMax = 500;

export const postApiV1PasswordsResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(postApiV1PasswordsResponseDataIdMin)
          .max(postApiV1PasswordsResponseDataIdMax),
        userId: zod
          .number()
          .min(postApiV1PasswordsResponseDataUserIdMin)
          .max(postApiV1PasswordsResponseDataUserIdMax),
        vaultId: zod
          .number()
          .min(postApiV1PasswordsResponseDataVaultIdMin)
          .max(postApiV1PasswordsResponseDataVaultIdMax),
        site: zod.string().max(postApiV1PasswordsResponseDataSiteMax),
        username: zod.string().max(postApiV1PasswordsResponseDataUsernameMax),
        password: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
        }),
        faviconUrl: zod
          .string()
          .max(postApiV1PasswordsResponseDataFaviconUrlMax)
          .nullable(),
        note: zod
          .string()
          .max(postApiV1PasswordsResponseDataNoteMax)
          .nullable(),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * fetch passwords
 * @summary Get all passwords
 */
export const getApiV1PasswordsQueryVaultIdMin = 0;

export const getApiV1PasswordsQueryParams = zod.object({
  vaultId: zod.number().min(getApiV1PasswordsQueryVaultIdMin),
  search: zod.string().min(1).optional(),
});

export const getApiV1PasswordsResponseDataItemIdMin = -2147483648;

export const getApiV1PasswordsResponseDataItemIdMax = 2147483647;
export const getApiV1PasswordsResponseDataItemUserIdMin = -2147483648;

export const getApiV1PasswordsResponseDataItemUserIdMax = 2147483647;
export const getApiV1PasswordsResponseDataItemVaultIdMin = -2147483648;

export const getApiV1PasswordsResponseDataItemVaultIdMax = 2147483647;
export const getApiV1PasswordsResponseDataItemSiteMax = 255;
export const getApiV1PasswordsResponseDataItemUsernameMax = 255;
export const getApiV1PasswordsResponseDataItemFaviconUrlMax = 255;
export const getApiV1PasswordsResponseDataItemNoteMax = 500;

export const getApiV1PasswordsResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  data: zod.array(
    zod.object({
      id: zod
        .number()
        .min(getApiV1PasswordsResponseDataItemIdMin)
        .max(getApiV1PasswordsResponseDataItemIdMax),
      userId: zod
        .number()
        .min(getApiV1PasswordsResponseDataItemUserIdMin)
        .max(getApiV1PasswordsResponseDataItemUserIdMax),
      vaultId: zod
        .number()
        .min(getApiV1PasswordsResponseDataItemVaultIdMin)
        .max(getApiV1PasswordsResponseDataItemVaultIdMax),
      site: zod.string().max(getApiV1PasswordsResponseDataItemSiteMax),
      username: zod.string().max(getApiV1PasswordsResponseDataItemUsernameMax),
      password: zod.object({
        iv: zod.string().min(1),
        encrypted: zod.string().min(1),
      }),
      faviconUrl: zod
        .string()
        .max(getApiV1PasswordsResponseDataItemFaviconUrlMax)
        .nullable(),
      note: zod
        .string()
        .max(getApiV1PasswordsResponseDataItemNoteMax)
        .nullable(),
      createdAt: zod.string().datetime(),
      updatedAt: zod.string().datetime(),
    })
  ),
});

/**
 * fetch password
 * @summary Get password by ID
 */
export const getApiV1PasswordsIdParams = zod.object({
  id: zod.number().min(1),
});

export const getApiV1PasswordsIdResponseDataIdMin = -2147483648;

export const getApiV1PasswordsIdResponseDataIdMax = 2147483647;
export const getApiV1PasswordsIdResponseDataUserIdMin = -2147483648;

export const getApiV1PasswordsIdResponseDataUserIdMax = 2147483647;
export const getApiV1PasswordsIdResponseDataVaultIdMin = -2147483648;

export const getApiV1PasswordsIdResponseDataVaultIdMax = 2147483647;
export const getApiV1PasswordsIdResponseDataSiteMax = 255;
export const getApiV1PasswordsIdResponseDataUsernameMax = 255;
export const getApiV1PasswordsIdResponseDataFaviconUrlMax = 255;
export const getApiV1PasswordsIdResponseDataNoteMax = 500;

export const getApiV1PasswordsIdResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  data: zod.object({
    id: zod
      .number()
      .min(getApiV1PasswordsIdResponseDataIdMin)
      .max(getApiV1PasswordsIdResponseDataIdMax),
    userId: zod
      .number()
      .min(getApiV1PasswordsIdResponseDataUserIdMin)
      .max(getApiV1PasswordsIdResponseDataUserIdMax),
    vaultId: zod
      .number()
      .min(getApiV1PasswordsIdResponseDataVaultIdMin)
      .max(getApiV1PasswordsIdResponseDataVaultIdMax),
    site: zod.string().max(getApiV1PasswordsIdResponseDataSiteMax),
    username: zod.string().max(getApiV1PasswordsIdResponseDataUsernameMax),
    password: zod.object({
      iv: zod.string().min(1),
      encrypted: zod.string().min(1),
    }),
    faviconUrl: zod
      .string()
      .max(getApiV1PasswordsIdResponseDataFaviconUrlMax)
      .nullable(),
    note: zod.string().max(getApiV1PasswordsIdResponseDataNoteMax).nullable(),
    createdAt: zod.string().datetime(),
    updatedAt: zod.string().datetime(),
  }),
});

/**
 * update password
 * @summary Update password by ID
 */
export const putApiV1PasswordsIdParams = zod.object({
  id: zod.number().min(1),
});

export const putApiV1PasswordsIdBodyUsernameMax = 255;
export const putApiV1PasswordsIdBodySiteMax = 255;
export const putApiV1PasswordsIdBodyFaviconUrlMax = 255;
export const putApiV1PasswordsIdBodyNoteMax = 500;

export const putApiV1PasswordsIdBody = zod.object({
  username: zod.string().min(1).max(putApiV1PasswordsIdBodyUsernameMax),
  password: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
  }),
  site: zod.string().min(1).max(putApiV1PasswordsIdBodySiteMax),
  faviconUrl: zod
    .string()
    .url()
    .max(putApiV1PasswordsIdBodyFaviconUrlMax)
    .nullish(),
  note: zod.string().max(putApiV1PasswordsIdBodyNoteMax).nullish(),
});

export const putApiV1PasswordsIdResponseDataIdMin = -2147483648;

export const putApiV1PasswordsIdResponseDataIdMax = 2147483647;
export const putApiV1PasswordsIdResponseDataUserIdMin = -2147483648;

export const putApiV1PasswordsIdResponseDataUserIdMax = 2147483647;
export const putApiV1PasswordsIdResponseDataVaultIdMin = -2147483648;

export const putApiV1PasswordsIdResponseDataVaultIdMax = 2147483647;
export const putApiV1PasswordsIdResponseDataSiteMax = 255;
export const putApiV1PasswordsIdResponseDataUsernameMax = 255;
export const putApiV1PasswordsIdResponseDataFaviconUrlMax = 255;
export const putApiV1PasswordsIdResponseDataNoteMax = 500;

export const putApiV1PasswordsIdResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(putApiV1PasswordsIdResponseDataIdMin)
          .max(putApiV1PasswordsIdResponseDataIdMax),
        userId: zod
          .number()
          .min(putApiV1PasswordsIdResponseDataUserIdMin)
          .max(putApiV1PasswordsIdResponseDataUserIdMax),
        vaultId: zod
          .number()
          .min(putApiV1PasswordsIdResponseDataVaultIdMin)
          .max(putApiV1PasswordsIdResponseDataVaultIdMax),
        site: zod.string().max(putApiV1PasswordsIdResponseDataSiteMax),
        username: zod.string().max(putApiV1PasswordsIdResponseDataUsernameMax),
        password: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
        }),
        faviconUrl: zod
          .string()
          .max(putApiV1PasswordsIdResponseDataFaviconUrlMax)
          .nullable(),
        note: zod
          .string()
          .max(putApiV1PasswordsIdResponseDataNoteMax)
          .nullable(),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * delete password
 * @summary Delete password by ID
 */
export const deleteApiV1PasswordsIdParams = zod.object({
  id: zod.number().min(1),
});

export const deleteApiV1PasswordsIdResponseDataIdMin = -2147483648;

export const deleteApiV1PasswordsIdResponseDataIdMax = 2147483647;
export const deleteApiV1PasswordsIdResponseDataUserIdMin = -2147483648;

export const deleteApiV1PasswordsIdResponseDataUserIdMax = 2147483647;
export const deleteApiV1PasswordsIdResponseDataVaultIdMin = -2147483648;

export const deleteApiV1PasswordsIdResponseDataVaultIdMax = 2147483647;
export const deleteApiV1PasswordsIdResponseDataSiteMax = 255;
export const deleteApiV1PasswordsIdResponseDataUsernameMax = 255;
export const deleteApiV1PasswordsIdResponseDataFaviconUrlMax = 255;
export const deleteApiV1PasswordsIdResponseDataNoteMax = 500;

export const deleteApiV1PasswordsIdResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(deleteApiV1PasswordsIdResponseDataIdMin)
          .max(deleteApiV1PasswordsIdResponseDataIdMax),
        userId: zod
          .number()
          .min(deleteApiV1PasswordsIdResponseDataUserIdMin)
          .max(deleteApiV1PasswordsIdResponseDataUserIdMax),
        vaultId: zod
          .number()
          .min(deleteApiV1PasswordsIdResponseDataVaultIdMin)
          .max(deleteApiV1PasswordsIdResponseDataVaultIdMax),
        site: zod.string().max(deleteApiV1PasswordsIdResponseDataSiteMax),
        username: zod
          .string()
          .max(deleteApiV1PasswordsIdResponseDataUsernameMax),
        password: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
        }),
        faviconUrl: zod
          .string()
          .max(deleteApiV1PasswordsIdResponseDataFaviconUrlMax)
          .nullable(),
        note: zod
          .string()
          .max(deleteApiV1PasswordsIdResponseDataNoteMax)
          .nullable(),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * import passwords
 * @summary Import multiple passwords
 */
export const postApiV1PasswordsImportBodyVaultIdMin = 0;

export const postApiV1PasswordsImportBodyVaultIdMax = 2147483647;
export const postApiV1PasswordsImportBodyUsernameMax = 255;
export const postApiV1PasswordsImportBodySiteMax = 255;
export const postApiV1PasswordsImportBodyFaviconUrlMax = 255;
export const postApiV1PasswordsImportBodyNoteMax = 500;

export const postApiV1PasswordsImportBodyItem = zod.object({
  vaultId: zod
    .number()
    .min(postApiV1PasswordsImportBodyVaultIdMin)
    .max(postApiV1PasswordsImportBodyVaultIdMax),
  username: zod.string().min(1).max(postApiV1PasswordsImportBodyUsernameMax),
  password: zod.object({
    iv: zod.string().min(1),
    encrypted: zod.string().min(1),
  }),
  site: zod.string().min(1).max(postApiV1PasswordsImportBodySiteMax),
  faviconUrl: zod
    .string()
    .url()
    .max(postApiV1PasswordsImportBodyFaviconUrlMax)
    .nullish(),
  note: zod.string().max(postApiV1PasswordsImportBodyNoteMax).nullish(),
});
export const postApiV1PasswordsImportBody = zod.array(
  postApiV1PasswordsImportBodyItem
);

export const postApiV1PasswordsImportResponseDataIdMin = -2147483648;

export const postApiV1PasswordsImportResponseDataIdMax = 2147483647;
export const postApiV1PasswordsImportResponseDataUserIdMin = -2147483648;

export const postApiV1PasswordsImportResponseDataUserIdMax = 2147483647;
export const postApiV1PasswordsImportResponseDataVaultIdMin = -2147483648;

export const postApiV1PasswordsImportResponseDataVaultIdMax = 2147483647;
export const postApiV1PasswordsImportResponseDataSiteMax = 255;
export const postApiV1PasswordsImportResponseDataUsernameMax = 255;
export const postApiV1PasswordsImportResponseDataFaviconUrlMax = 255;
export const postApiV1PasswordsImportResponseDataNoteMax = 500;

export const postApiV1PasswordsImportResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(postApiV1PasswordsImportResponseDataIdMin)
          .max(postApiV1PasswordsImportResponseDataIdMax),
        userId: zod
          .number()
          .min(postApiV1PasswordsImportResponseDataUserIdMin)
          .max(postApiV1PasswordsImportResponseDataUserIdMax),
        vaultId: zod
          .number()
          .min(postApiV1PasswordsImportResponseDataVaultIdMin)
          .max(postApiV1PasswordsImportResponseDataVaultIdMax),
        site: zod.string().max(postApiV1PasswordsImportResponseDataSiteMax),
        username: zod
          .string()
          .max(postApiV1PasswordsImportResponseDataUsernameMax),
        password: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
        }),
        faviconUrl: zod
          .string()
          .max(postApiV1PasswordsImportResponseDataFaviconUrlMax)
          .nullable(),
        note: zod
          .string()
          .max(postApiV1PasswordsImportResponseDataNoteMax)
          .nullable(),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * update user details
 * @summary Update user details
 */
export const patchApiV1UsersBodyUserNameMin = 2;

export const patchApiV1UsersBodyUserNameMax = 255;
export const patchApiV1UsersBodyFileIdMax = 2147483647;

export const patchApiV1UsersBody = zod.object({
  userName: zod
    .string()
    .min(patchApiV1UsersBodyUserNameMin)
    .max(patchApiV1UsersBodyUserNameMax)
    .optional(),
  fileId: zod.number().min(1).max(patchApiV1UsersBodyFileIdMax).nullish(),
});

export const patchApiV1UsersResponseDataIdMin = -2147483648;

export const patchApiV1UsersResponseDataIdMax = 2147483647;
export const patchApiV1UsersResponseDataUserNameMax = 255;
export const patchApiV1UsersResponseDataEmailMax = 255;

export const patchApiV1UsersResponse = zod
  .object({
    status: zod.enum(["success", "fail", "error"]),
    message: zod.string(),
  })
  .and(
    zod.object({
      data: zod.object({
        id: zod
          .number()
          .min(patchApiV1UsersResponseDataIdMin)
          .max(patchApiV1UsersResponseDataIdMax),
        userName: zod.string().max(patchApiV1UsersResponseDataUserNameMax),
        email: zod.string().max(patchApiV1UsersResponseDataEmailMax),
        masterKey: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
          salt: zod.string().min(1),
        }),
        recoveryKey: zod.object({
          iv: zod.string().min(1),
          encrypted: zod.string().min(1),
          salt: zod.string().min(1),
        }),
        createdAt: zod.string().datetime(),
        updatedAt: zod.string().datetime(),
      }),
    })
  );

/**
 * fetch user details
 * @summary Get logged in user detail
 */
export const getApiV1UsersResponseDataIdMin = -2147483648;

export const getApiV1UsersResponseDataIdMax = 2147483647;
export const getApiV1UsersResponseDataUserNameMax = 255;
export const getApiV1UsersResponseDataEmailMax = 255;
export const getApiV1UsersResponseDataFileIdMin = -2147483648;

export const getApiV1UsersResponseDataFileIdMax = 2147483647;
export const getApiV1UsersResponseDataFileUrlMax = 512;
export const getApiV1UsersResponseDataFileFileKeyMax = 256;

export const getApiV1UsersResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  data: zod
    .object({
      id: zod
        .number()
        .min(getApiV1UsersResponseDataIdMin)
        .max(getApiV1UsersResponseDataIdMax),
      userName: zod.string().max(getApiV1UsersResponseDataUserNameMax),
      email: zod.string().max(getApiV1UsersResponseDataEmailMax),
      masterKey: zod.object({
        iv: zod.string().min(1),
        encrypted: zod.string().min(1),
        salt: zod.string().min(1),
      }),
      recoveryKey: zod.object({
        iv: zod.string().min(1),
        encrypted: zod.string().min(1),
        salt: zod.string().min(1),
      }),
      createdAt: zod.string().datetime(),
      updatedAt: zod.string().datetime(),
    })
    .and(
      zod.object({
        file: zod.object({
          id: zod
            .number()
            .min(getApiV1UsersResponseDataFileIdMin)
            .max(getApiV1UsersResponseDataFileIdMax),
          url: zod.string().max(getApiV1UsersResponseDataFileUrlMax),
          fileKey: zod.string().max(getApiV1UsersResponseDataFileFileKeyMax),
          createdAt: zod.string().datetime(),
          updatedAt: zod.string().datetime(),
        }),
      })
    ),
});

/**
 * Get vaults
 * @summary Get vaults
 */
export const getApiV1VaultsResponseDataItemIdMin = -2147483648;

export const getApiV1VaultsResponseDataItemIdMax = 2147483647;
export const getApiV1VaultsResponseDataItemUserIdMin = -2147483648;

export const getApiV1VaultsResponseDataItemUserIdMax = 2147483647;

export const getApiV1VaultsResponse = zod.object({
  status: zod.enum(["success", "fail", "error"]),
  data: zod.array(
    zod.object({
      id: zod
        .number()
        .min(getApiV1VaultsResponseDataItemIdMin)
        .max(getApiV1VaultsResponseDataItemIdMax),
      name: zod.string(),
      userId: zod
        .number()
        .min(getApiV1VaultsResponseDataItemUserIdMin)
        .max(getApiV1VaultsResponseDataItemUserIdMax),
      createdAt: zod.string().datetime(),
      updatedAt: zod.string().datetime(),
    })
  ),
});

/**
 * Add vault
 * @summary Add vault
 */
export const postApiV1VaultsBody = zod.object({
  name: zod.string().min(1),
});

export const postApiV1VaultsResponseDataIdMin = -2147483648;

export const postApiV1VaultsResponseDataIdMax = 2147483647;
export const postApiV1VaultsResponseDataUserIdMin = -2147483648;

export const postApiV1VaultsResponseDataUserIdMax = 2147483647;

export const postApiV1VaultsResponse = zod.object({
  status: zod.enum(["success"]),
  message: zod.enum(["Vault created successfully"]),
  data: zod.object({
    id: zod
      .number()
      .min(postApiV1VaultsResponseDataIdMin)
      .max(postApiV1VaultsResponseDataIdMax),
    name: zod.string(),
    userId: zod
      .number()
      .min(postApiV1VaultsResponseDataUserIdMin)
      .max(postApiV1VaultsResponseDataUserIdMax),
    createdAt: zod.string().datetime(),
    updatedAt: zod.string().datetime(),
  }),
});

/**
 * Update vault
 * @summary Update vault
 */
export const putApiV1VaultsIdParams = zod.object({
  id: zod.number().min(1),
});

export const putApiV1VaultsIdBody = zod.object({
  name: zod.string().min(1),
});

export const putApiV1VaultsIdResponseDataIdMin = -2147483648;

export const putApiV1VaultsIdResponseDataIdMax = 2147483647;
export const putApiV1VaultsIdResponseDataUserIdMin = -2147483648;

export const putApiV1VaultsIdResponseDataUserIdMax = 2147483647;

export const putApiV1VaultsIdResponse = zod.object({
  status: zod.enum(["success"]),
  message: zod.enum(["Vault updated successfully"]),
  data: zod.object({
    id: zod
      .number()
      .min(putApiV1VaultsIdResponseDataIdMin)
      .max(putApiV1VaultsIdResponseDataIdMax),
    name: zod.string(),
    userId: zod
      .number()
      .min(putApiV1VaultsIdResponseDataUserIdMin)
      .max(putApiV1VaultsIdResponseDataUserIdMax),
    createdAt: zod.string().datetime(),
    updatedAt: zod.string().datetime(),
  }),
});

/**
 * Add vault
 * @summary Add vault
 */
export const deleteApiV1VaultsIdParams = zod.object({
  id: zod.number().min(1),
});

export const deleteApiV1VaultsIdResponseDataIdMin = -2147483648;

export const deleteApiV1VaultsIdResponseDataIdMax = 2147483647;
export const deleteApiV1VaultsIdResponseDataUserIdMin = -2147483648;

export const deleteApiV1VaultsIdResponseDataUserIdMax = 2147483647;

export const deleteApiV1VaultsIdResponse = zod.object({
  status: zod.enum(["success"]),
  message: zod.enum(["Vault deleted successfully"]),
  data: zod.object({
    id: zod
      .number()
      .min(deleteApiV1VaultsIdResponseDataIdMin)
      .max(deleteApiV1VaultsIdResponseDataIdMax),
    name: zod.string(),
    userId: zod
      .number()
      .min(deleteApiV1VaultsIdResponseDataUserIdMin)
      .max(deleteApiV1VaultsIdResponseDataUserIdMax),
    createdAt: zod.string().datetime(),
    updatedAt: zod.string().datetime(),
  }),
});
